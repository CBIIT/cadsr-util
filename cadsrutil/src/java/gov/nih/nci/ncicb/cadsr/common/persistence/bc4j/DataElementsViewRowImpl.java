/*L
 * Copyright Oracle inc, SAIC-F
 *
 * Distributed under the OSI-approved BSD 3-Clause License.
 * See http://ncip.github.com/cadsr-util/LICENSE.txt for details.
 */

package gov.nih.nci.ncicb.cadsr.common.persistence.bc4j;

import gov.nih.nci.ncicb.cadsr.common.dto.bc4j.BC4JContextTransferObject;
import gov.nih.nci.ncicb.cadsr.common.dto.bc4j.BC4JDataElementConceptTransferObject;
import gov.nih.nci.ncicb.cadsr.common.dto.bc4j.BC4JDesignationTransferObject;
import gov.nih.nci.ncicb.cadsr.common.dto.bc4j.BC4JValueDomainTransferObject;
import gov.nih.nci.ncicb.cadsr.common.resource.*;

import gov.nih.nci.ncicb.cadsr.common.util.NCIBC4JUtil;
import gov.nih.nci.ncicb.cadsr.common.util.logging.Log;
import gov.nih.nci.ncicb.cadsr.common.util.logging.LogFactory;
import oracle.clex.persistence.bc4j.*;

import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowIterator;

import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;

import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;

import java.util.*;


//  ---------------------------------------------------------------
//  ---    File generated by Oracle Business Components for Java.
//  ---------------------------------------------------------------
public class DataElementsViewRowImpl extends ViewRowImpl {
  public static final int DEIDSEQ = 0;
  public static final int VERSION = 1;
  public static final int CONTEIDSEQ = 2;
  public static final int PREFERREDNAME = 3;
  public static final int VDIDSEQ = 4;
  public static final int DECIDSEQ = 5;
  public static final int PREFERREDDEFINITION = 6;
  public static final int ASLNAME = 7;
  public static final int LONGNAME = 8;
  public static final int LATESTVERSIONIND = 9;
  public static final int DELETEDIND = 10;
  public static final int DATECREATED = 11;
  public static final int BEGINDATE = 12;
  public static final int CREATEDBY = 13;
  public static final int ENDDATE = 14;
  public static final int DATEMODIFIED = 15;
  public static final int MODIFIEDBY = 16;
  public static final int CHANGENOTE = 17;
  public static final int ORIGIN = 18;
  public static final int CDEID = 19;
  public static final int QUESTION = 20;
  public static final int DATAELEMENTCONCEPTSROW = 21;
  private static Log log = LogFactory.getLog(DataElementsViewRowImpl.class.getName());

  /**
   *
   * This is the default constructor (do not remove)
   */
  public DataElementsViewRowImpl() {
  }

  /**
   *
   * Gets DataElements entity object.
   */
  public DataElementsImpl getDataElements() {
    return (DataElementsImpl) getEntity(0);
  }

  /**
   *
   * Gets the attribute value for DE_IDSEQ using the alias name DeIdseq
   */
  public String getDeIdseq() {
    return (String) getAttributeInternal(DEIDSEQ);
  }

  /**
   *
   * Sets <code>value</code> as attribute value for DE_IDSEQ using the alias name DeIdseq
   */
  public void setDeIdseq(String value) {
    setAttributeInternal(DEIDSEQ, value);
  }

  /**
   *
   * Gets the attribute value for VERSION using the alias name Version
   */
  public Number getVersion() {
    return (Number) getAttributeInternal(VERSION);
  }

  /**
   *
   * Sets <code>value</code> as attribute value for VERSION using the alias name Version
   */
  public void setVersion(Number value) {
    setAttributeInternal(VERSION, value);
  }

  /**
   *
   * Gets the attribute value for CONTE_IDSEQ using the alias name ConteIdseq
   */
  public String getConteIdseq() {
    return (String) getAttributeInternal(CONTEIDSEQ);
  }

  /**
   *
   * Sets <code>value</code> as attribute value for CONTE_IDSEQ using the alias name ConteIdseq
   */
  public void setConteIdseq(String value) {
    setAttributeInternal(CONTEIDSEQ, value);
  }

  /**
   *
   * Gets the attribute value for PREFERRED_NAME using the alias name PreferredName
   */
  public String getPreferredName() {
    return (String) getAttributeInternal(PREFERREDNAME);
  }

  /**
   *
   * Sets <code>value</code> as attribute value for PREFERRED_NAME using the alias name PreferredName
   */
  public void setPreferredName(String value) {
    setAttributeInternal(PREFERREDNAME, value);
  }

  /**
   *
   * Gets the attribute value for VD_IDSEQ using the alias name VdIdseq
   */
  public String getVdIdseq() {
    return (String) getAttributeInternal(VDIDSEQ);
  }

  /**
   *
   * Sets <code>value</code> as attribute value for VD_IDSEQ using the alias name VdIdseq
   */
  public void setVdIdseq(String value) {
    setAttributeInternal(VDIDSEQ, value);
  }

  /**
   *
   * Gets the attribute value for DEC_IDSEQ using the alias name DecIdseq
   */
  public String getDecIdseq() {
    return (String) getAttributeInternal(DECIDSEQ);
  }

  /**
   *
   * Sets <code>value</code> as attribute value for DEC_IDSEQ using the alias name DecIdseq
   */
  public void setDecIdseq(String value) {
    setAttributeInternal(DECIDSEQ, value);
  }

  /**
   *
   * Gets the attribute value for PREFERRED_DEFINITION using the alias name PreferredDefinition
   */
  public String getPreferredDefinition() {
    return (String) getAttributeInternal(PREFERREDDEFINITION);
  }

  /**
   *
   * Sets <code>value</code> as attribute value for PREFERRED_DEFINITION using the alias name PreferredDefinition
   */
  public void setPreferredDefinition(String value) {
    setAttributeInternal(PREFERREDDEFINITION, value);
  }

  /**
   *
   * Gets the attribute value for ASL_NAME using the alias name AslName
   */
  public String getAslName() {
    return (String) getAttributeInternal(ASLNAME);
  }

  /**
   *
   * Sets <code>value</code> as attribute value for ASL_NAME using the alias name AslName
   */
  public void setAslName(String value) {
    setAttributeInternal(ASLNAME, value);
  }

  /**
   *
   * Gets the attribute value for LONG_NAME using the alias name LongName
   */
  public String getLongName() {
    return (String) getAttributeInternal(LONGNAME);
  }

  /**
   *
   * Sets <code>value</code> as attribute value for LONG_NAME using the alias name LongName
   */
  public void setLongName(String value) {
    setAttributeInternal(LONGNAME, value);
  }

  /**
   *
   * Gets the attribute value for LATEST_VERSION_IND using the alias name LatestVersionInd
   */
  public String getLatestVersionInd() {
    return (String) getAttributeInternal(LATESTVERSIONIND);
  }

  /**
   *
   * Sets <code>value</code> as attribute value for LATEST_VERSION_IND using the alias name LatestVersionInd
   */
  public void setLatestVersionInd(String value) {
    setAttributeInternal(LATESTVERSIONIND, value);
  }

  /**
   *
   * Gets the attribute value for DELETED_IND using the alias name DeletedInd
   */
  public String getDeletedInd() {
    return (String) getAttributeInternal(DELETEDIND);
  }

  /**
   *
   * Sets <code>value</code> as attribute value for DELETED_IND using the alias name DeletedInd
   */
  public void setDeletedInd(String value) {
    setAttributeInternal(DELETEDIND, value);
  }

  /**
   *
   * Gets the attribute value for DATE_CREATED using the alias name DateCreated
   */
  public Date getDateCreated() {
    return (Date) getAttributeInternal(DATECREATED);
  }

  /**
   *
   * Sets <code>value</code> as attribute value for DATE_CREATED using the alias name DateCreated
   */
  public void setDateCreated(Date value) {
    setAttributeInternal(DATECREATED, value);
  }

  /**
   *
   * Gets the attribute value for BEGIN_DATE using the alias name BeginDate
   */
  public Date getBeginDate() {
    return (Date) getAttributeInternal(BEGINDATE);
  }

  /**
   *
   * Sets <code>value</code> as attribute value for BEGIN_DATE using the alias name BeginDate
   */
  public void setBeginDate(Date value) {
    setAttributeInternal(BEGINDATE, value);
  }

  /**
   *
   * Gets the attribute value for CREATED_BY using the alias name CreatedBy
   */
  public String getCreatedBy() {
    return (String) getAttributeInternal(CREATEDBY);
  }

  /**
   *
   * Sets <code>value</code> as attribute value for CREATED_BY using the alias name CreatedBy
   */
  public void setCreatedBy(String value) {
    setAttributeInternal(CREATEDBY, value);
  }

  /**
   *
   * Gets the attribute value for END_DATE using the alias name EndDate
   */
  public Date getEndDate() {
    return (Date) getAttributeInternal(ENDDATE);
  }

  /**
   *
   * Sets <code>value</code> as attribute value for END_DATE using the alias name EndDate
   */
  public void setEndDate(Date value) {
    setAttributeInternal(ENDDATE, value);
  }

  /**
   *
   * Gets the attribute value for DATE_MODIFIED using the alias name DateModified
   */
  public Date getDateModified() {
    return (Date) getAttributeInternal(DATEMODIFIED);
  }

  /**
   *
   * Sets <code>value</code> as attribute value for DATE_MODIFIED using the alias name DateModified
   */
  public void setDateModified(Date value) {
    setAttributeInternal(DATEMODIFIED, value);
  }

  /**
   *
   * Gets the attribute value for MODIFIED_BY using the alias name ModifiedBy
   */
  public String getModifiedBy() {
    return (String) getAttributeInternal(MODIFIEDBY);
  }

  /**
   *
   * Sets <code>value</code> as attribute value for MODIFIED_BY using the alias name ModifiedBy
   */
  public void setModifiedBy(String value) {
    setAttributeInternal(MODIFIEDBY, value);
  }

  /**
   *
   * Gets the attribute value for CHANGE_NOTE using the alias name ChangeNote
   */
  public String getChangeNote() {
    return (String) getAttributeInternal(CHANGENOTE);
  }

  /**
   *
   * Sets <code>value</code> as attribute value for CHANGE_NOTE using the alias name ChangeNote
   */
  public void setChangeNote(String value) {
    setAttributeInternal(CHANGENOTE, value);
  }

  //  Generated method. Do not modify.
  protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef)
    throws Exception {
    switch (index)
      {
      case DEIDSEQ:
        return getDeIdseq();
      case VERSION:
        return getVersion();
      case CONTEIDSEQ:
        return getConteIdseq();
      case PREFERREDNAME:
        return getPreferredName();
      case VDIDSEQ:
        return getVdIdseq();
      case DECIDSEQ:
        return getDecIdseq();
      case PREFERREDDEFINITION:
        return getPreferredDefinition();
      case ASLNAME:
        return getAslName();
      case LONGNAME:
        return getLongName();
      case LATESTVERSIONIND:
        return getLatestVersionInd();
      case DELETEDIND:
        return getDeletedInd();
      case DATECREATED:
        return getDateCreated();
      case BEGINDATE:
        return getBeginDate();
      case CREATEDBY:
        return getCreatedBy();
      case ENDDATE:
        return getEndDate();
      case DATEMODIFIED:
        return getDateModified();
      case MODIFIEDBY:
        return getModifiedBy();
      case CHANGENOTE:
        return getChangeNote();
      case ORIGIN:
        return getOrigin();
      case CDEID:
        return getCdeId();
      case QUESTION:
        return getQuestion();
      case DATAELEMENTCONCEPTSROW:
        return getDataElementConceptsRow();
      default:
        return super.getAttrInvokeAccessor(index, attrDef);
      }
  }

  //  Generated method. Do not modify.
  protected void setAttrInvokeAccessor(
    int index, Object value, AttributeDefImpl attrDef)
    throws Exception {
    switch (index)
      {
      case DEIDSEQ:
        setDeIdseq((String)value);
        return;
      case VERSION:
        setVersion((Number)value);
        return;
      case CONTEIDSEQ:
        setConteIdseq((String)value);
        return;
      case PREFERREDNAME:
        setPreferredName((String)value);
        return;
      case VDIDSEQ:
        setVdIdseq((String)value);
        return;
      case DECIDSEQ:
        setDecIdseq((String)value);
        return;
      case PREFERREDDEFINITION:
        setPreferredDefinition((String)value);
        return;
      case ASLNAME:
        setAslName((String)value);
        return;
      case LONGNAME:
        setLongName((String)value);
        return;
      case LATESTVERSIONIND:
        setLatestVersionInd((String)value);
        return;
      case DELETEDIND:
        setDeletedInd((String)value);
        return;
      case DATECREATED:
        setDateCreated((Date)value);
        return;
      case BEGINDATE:
        setBeginDate((Date)value);
        return;
      case CREATEDBY:
        setCreatedBy((String)value);
        return;
      case ENDDATE:
        setEndDate((Date)value);
        return;
      case DATEMODIFIED:
        setDateModified((Date)value);
        return;
      case MODIFIEDBY:
        setModifiedBy((String)value);
        return;
      case CHANGENOTE:
        setChangeNote((String)value);
        return;
      case ORIGIN:
        setOrigin((String)value);
        return;
      case CDEID:
        setCdeId((Number)value);
        return;
      case QUESTION:
        setQuestion((String)value);
        return;
      default:
        super.setAttrInvokeAccessor(index, value, attrDef);
        return;
      }
  }

  public ValueDomain getValueDomain() {
    try {
      oracle.jbo.ViewObject vdView =
        getViewObject().getApplicationModule().findViewObject(
          "ValueDomainsView");

      vdView.setWhereClause("VD_IDSEQ='" + getVdIdseq() + "'");

      Row row = vdView.first();

      ValueDomain vd =
        (ValueDomain) new BC4JValueDomainTransferObject(
          (ValueDomainsViewRowImpl) row);

      return vd;
    } // end try
    catch (Exception e) {
      log.error("Error in DataElementsViewRowImpl.getValueDomain(): ", e);

      return null;
    }
  }

  public Context getContext() {
    try {
      oracle.jbo.ViewObject vdView =
        getViewObject().getApplicationModule().findViewObject("ContextsView");

      vdView.setWhereClause("CONTE_IDSEQ='" + getConteIdseq() + "'");

      Row row = vdView.first();

      Context conte =
        (Context) new BC4JContextTransferObject((ContextsViewRowImpl) row);

      return conte;
    } // end try
    catch (Exception e) {
      log.error("Error in DataElementsViewRowImpl.getContext(): ", e);

      return null;
    }
  }

  public String getLongCDEName() {
    String longCDEName = null;

    try {
      oracle.jbo.ViewObject rdView =
        getViewObject().getApplicationModule().findViewObject(
          "ReferenceDocumentsView");

      rdView.setWhereClause(
        "AC_IDSEQ='" + getDeIdseq() + "' AND DCTL_NAME = 'Preferred Question Text'");

      Row row = rdView.first();

      if (row != null) {
        longCDEName = (String) row.getAttribute("DocText");
      }

      //String longCDEName = row
    } // end try
    catch (Exception e) {
      log.error("Error in getLongCDEName(): ", e);
    }

    return longCDEName;
  }

  public String getCDEId() {
    Number cdeId = null;

    try {
      oracle.jbo.ViewObject cdeIdView =
        getViewObject().getApplicationModule().findViewObject("DeCdeIdView");

      cdeIdView.setWhereClause("AC_IDSEQ='" + getDeIdseq() + "'");

      Row row = cdeIdView.first();

      if (row != null) {
        cdeId = (Number) row.getAttribute("MinCdeId");
      }

      return cdeId.toString();
    } // end try
    catch (Exception e) {
      log.error("Error in getCDEId(): ", e);

      return null;
    }
  }

  public String getRegistrationStatus() {
    String rgStatus = null;

    try {
      oracle.jbo.ViewObject rView =
        getViewObject().getApplicationModule().findViewObject(
          "AcRegistrationsView");

      rView.setWhereClause(
        "AC_IDSEQ='" + getDeIdseq() + "'");

      Row row = rView.first();

      if (row != null) {
        rgStatus = (String) row.getAttribute("RegistrationStatus");
      }

      //String longCDEName = row
    } // end try
    catch (Exception e) {
      log.error("Error in getRegistrationStatus(): ",  e);
    }

    return rgStatus;
  }


  public DataElementConcept getDataElementConcept() {
    try {
      oracle.jbo.ViewObject decView =
        getViewObject().getApplicationModule().findViewObject(
          "DataElementConceptsView");

      decView.setWhereClause("DEC_IDSEQ='" + getDecIdseq() + "'");

      Row row = decView.first();

      DataElementConcept dec =
        (DataElementConcept) new BC4JDataElementConceptTransferObject(
          (DataElementConceptsViewRowImpl) row);

      return dec;
    } // end try
    catch (Exception e) {
      log.error("Error in getDataElementConcept(): ", e);

      return null;
    }
  }

  public List getReferenceDocs() {
    List refDocs = new ArrayList(9);
    NCIBC4JUtil bc4jUtil = new NCIBC4JUtil();

    try {
      oracle.jbo.ViewObject rdView =
        getViewObject().getApplicationModule().findViewObject(
          "ReferenceDocumentsView");

      ViewObjectImpl rdView1 =
        (ReferenceDocumentsViewImpl) bc4jUtil.cloneViewObject(rdView);
      rdView1.setWhereClause("AC_IDSEQ='" + getDeIdseq() + "'");
      rdView1.executeQuery();

      while (rdView1.hasNext()) {
        refDocs.add(
          new ReferenceDocValueObject(
            (ReferenceDocumentsViewRowImpl) rdView1.next()));
      }
    } // end try
    catch (Exception e) {
      log.error("Error in getReferenceDocs(): ", e);
    }

    return refDocs;
  }

  public List getDesignations() {
    List designations = new ArrayList(9);
    NCIBC4JUtil bc4jUtil = new NCIBC4JUtil();

    try {
      oracle.jbo.ViewObject desView =
        getViewObject().getApplicationModule().findViewObject(
          "DesignationsView");

      /*ViewObjectImpl desView1 = (DesignationsViewImpl)
                                       bc4jUtil.cloneViewObject(desView);*/
      desView.setWhereClause("AC_IDSEQ='" + getDeIdseq() + "'");
      desView.executeQuery();

      while (desView.hasNext()) {
        designations.add(
          new BC4JDesignationTransferObject(
            (DesignationsViewRowImpl) desView.next()));
      }
    } catch (Exception e) {
      log.error("Error in getDesignations(): ", e);
    }

    return designations;
  }

  /**
   *
   * Gets the names of the contexts that use this data element. The names of the
   * contexts are are comma separated.
   */
  public String getUsingContexts() throws Exception {
    NCIBC4JUtil bc4jUtil = new NCIBC4JUtil();
    String usingContext = "";
    StringBuffer sbuf = new StringBuffer("");

    try {
      oracle.jbo.ViewObject desView =
        getViewObject().getApplicationModule().findViewObject(
          "DesignationsView");

      /*ViewObjectImpl desView1 = (DesignationsViewImpl)
                                       bc4jUtil.cloneViewObject(desView);*/
      desView.setWhereClause(
        "AC_IDSEQ='" + getDeIdseq() + "' and DETL_NAME = 'USED_BY'");
      desView.executeQuery();

      DesignationsViewRowImpl desRow;
      String desContext;
      boolean multipleUsedBys = false;

      while (desView.hasNext()) {
        desRow = (DesignationsViewRowImpl) desView.next();
        desContext = (String) desRow.getContextsRow().getAttribute("Name");

        if (!multipleUsedBys) {
          sbuf.append(desContext);
          multipleUsedBys = true;
        } else {
          sbuf.append(" , " + desContext);
        }
      }
    } catch (Exception e) {
      throw e;
    }

    return sbuf.toString();
  }

  /**
   *
   * Gets the associated <code>Row</code> using master-detail link DataElementConceptsRow
   */
  public Row getDataElementConceptsRow() {
    return (Row) getAttributeInternal(DATAELEMENTCONCEPTSROW);
  }

  /**
   *
   * Gets the attribute value for ORIGIN using the alias name Origin
   */
  public String getOrigin() {
    return (String) getAttributeInternal(ORIGIN);
  }

  /**
   *
   * Sets <code>value</code> as attribute value for ORIGIN using the alias name Origin
   */
  public void setOrigin(String value) {
    setAttributeInternal(ORIGIN, value);
  }

  /**
   *
   * Gets the attribute value for CDE_ID using the alias name CdeId
   */
  public Number getCdeId() {
    return (Number) getAttributeInternal(CDEID);
  }

  /**
   *
   * Sets <code>value</code> as attribute value for CDE_ID using the alias name CdeId
   */
  public void setCdeId(Number value) {
    setAttributeInternal(CDEID, value);
  }

  /**
   *
   * Gets the attribute value for QUESTION using the alias name Question
   */
  public String getQuestion() {
    return (String) getAttributeInternal(QUESTION);
  }

  /**
   *
   * Sets <code>value</code> as attribute value for QUESTION using the alias name Question
   */
  public void setQuestion(String value) {
    setAttributeInternal(QUESTION, value);
  }
}
